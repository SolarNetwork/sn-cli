buildscript {
	repositories {
		mavenCentral()
		maven { url = "https://plugins.gradle.org/m2/" }
	}
}

plugins {
	id 'net.ltgt.errorprone' version '4.2.0' apply false
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'net.ltgt.errorprone'
	
	group = 's10k.tool'
	version = '0.4.0-dev.0'
	
	repositories {
		mavenCentral()
	}
	
	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(21)
		}
	}

	[
		compileJava,
		compileTestJava
	].each() {
		it.options.release = 21
		it.options.compilerArgs += [
			"-Xlint:all",
			"-Xlint:-options",
			"-Xlint:-path",
			"-Xlint:-serial",
			"-Xlint:-this-escape",
			"-Xlint:-try",
			"-parameters"
		]
		it.options.encoding = "UTF-8"
		if (rootProject.hasProperty('failOnWarnings') && rootProject.failOnWarnings.toBoolean()) {
			it.options.compilerArgs += ["-Werror"]
		}
		it.options.errorprone.disable("InlineMeSuggester")
	}
	
	compileJava {
		it.options.errorprone.enabled = !(rootProject.hasProperty('errorProneDisabled') && rootProject.errorProneDisabled.toBoolean());
		it.options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
	}

	compileTestJava {
		options.compilerArgs += [
			"-Xlint:-serial",
			"-Xlint:-static",
			"-Xlint:-this-escape"
		]
		options.errorprone.disable("BadImport", "CheckReturnValue")
		it.options.errorprone.enabled = (rootProject.hasProperty('errorProneEnabledTest') && rootProject.errorProneEnabledTest.toBoolean());
	}

	jar.manifest {
		attributes('Implementation-Title': name,
		'Implementation-Version': version,
		'Built-By': System.getProperty('user.name'),
		'Built-JDK': System.getProperty('java.version'))
	}

	ext {
		asciiTableVersion = '1.8.0'
		commonsIoVersion = '2.20.0'
		picoCliVersion = '4.7.7'
		snCommonVersion = '4.4.0'
		snCommonWebJakartaVersion = '2.1.1'
		superCsvVersion = '2.4.0'
		threetenExtraVersion = '1.8.0'
	
		libraries = [
			mockito: 'org.mockito:mockito-core',
			mockitoJupiter: 'org.mockito:mockito-junit-jupiter'
		]
	}
	
	ext['netty.version'] = '4.2.3.Final'	

	dependencies {
		testImplementation libraries.mockito,
				libraries.mockitoJupiter,
				'org.junit.jupiter:junit-jupiter-api',
				'org.junit.jupiter:junit-jupiter',
				'org.junit.platform:junit-platform-launcher'
		
		errorprone 'com.google.errorprone:error_prone_core:2.41.0'
	}

	configurations {
		all*.exclude group: 'commons-logging'
		all {	
			resolutionStrategy {
				// the following are to pick up security fixes in transitive dependencies
				force "commons-io:commons-io:${commonsIoVersion}"
			}
			resolutionStrategy.eachDependency { DependencyResolveDetails details ->
				if (details.requested.group == 'software.amazon.awssdk') {
					details.useVersion "${awsSdk2Version}"
				}
			}
		}
	}
	
	pluginManager.withPlugin('eclipse') { 
		eclipse {
			jdt {
				javaRuntimeName = 'JavaSE-21'
				file {
					withProperties { properties ->
						// set properties for the file org.eclipse.jdt.core.prefs to enable -parameters for Spring 6
						properties['org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode'] = 'enabled'
						properties['org.eclipse.jdt.core.compiler.codegen.methodParameters'] = 'generate'
					}
				}
			}
		}
	}
    
	test {
		useJUnitPlatform()
		testLogging {
			exceptionFormat = 'full'
			showExceptions = true
			showCauses = true
			showStackTraces = true
		}
		maxHeapSize = '1500m'
	}

}

task testReport(type: TestReport) {
	destinationDirectory = file("$buildDir/reports/all-tests")
	// Combine all 'test' task results into a single HTML report
	testResults.from(subprojects*.test*.binaryResultsDirectory)
}
