{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SolarNetwork CLI","text":"<p>This handbook provides guides and reference documentation for the SolarNetwork command line interface (CLI) tool, <code>s10k</code>. This is a command oriented tool where each command supports its own set of options, along with some global options.</p> <p>Here is an example of running <code>s10k</code> to display the metadata associated with a SolarNode, using the <code>nodes meta list</code> command:</p> <pre><code>s10k --profile demo nodes meta list --node-id 101\n\nProperty Value\n------------------------------------\nnodeId   101\ncreated  2025-08-28T23:22:00.237150Z\nupdated  2025-08-28T23:22:00.237150Z\n{\n  \"pm\" : {\n    \"os\" : {\n      \"arch\" : \"aarch64\",\n      \"name\" : \"Linux\",\n      \"version\" : \"6.1.21-v8+\"\n    }\n  }\n}\n</code></pre>"},{"location":"global-options/","title":"Global options","text":"<p>Some \"global\" options are available irrespective of the command you are running. They must be provided before the command and any subsequent command-specific options. The following global options are supported:</p> Option Long Version Description <code>-h</code> <code>--help</code> Display help information <code>-P</code> <code>--profile</code> Select a profile to use <code>--http-trace</code> Enable HTTP exchange trace logging. Must also configure the <code>net.solarnetwork.http.REQ</code> and/or <code>net.solarnetwork.http.RES</code> logger levels to <code>TRACE</code>. <code>-v</code> <code>--verbose</code> Increase verbosity of output. Can specify multiple times to increase verbosity even more."},{"location":"install/","title":"Install","text":"<p>TODO</p>"},{"location":"logging/","title":"Logging","text":"<p>Debug logging can be enabled by creating an <code>application.yml</code> file in your working directory. You can then configure standard Spring Boot Logging settings. For example if you would like HTTP exchange traces, use the <code>--http-trace</code> global option and then configure <code>application.yml</code> something like this:</p> <pre><code>logging:\n  file.name: \"/var/tmp/s10k.log\"\n  level:\n    net.solarnetwork.http: \"TRACE\"\n  threshold:\n    console: \"OFF\"\n    file: \"TRACE\"\n</code></pre>"},{"location":"profiles/","title":"Profiles","text":"<p>To help make it easier to provide the necessary SolarNetwork credentials to the tool, you can create named credential  profiles that you can specify with the <code>--profile/-P</code> options, for example:</p> <pre><code>s10k --profile=home ...\n</code></pre> <p>The profiles are stored in a <code>$HOME/.s10k/credentials</code> file, where <code>$HOME</code> is your system user's \"home\" directory. For example on macOS for a user <code>alice</code> this might look like <code>/Users/alice/.s10k/credentials</code> or on Linux <code>/home/alice/.s10k/credentials</code>.</p> <p>Warning</p> <p>As you will be configuring your SolarNetwork credentials in this file, you should take care to configure limited permissions to the file.</p> <p>Here is how you could set up the <code>credentials</code> file the first time, ensuring limited permissions to the file:</p> macOS/LinuxWindows <pre><code>mkdir ~/.s10k\nchmod 700 ~/.s10k\ntouch ~/.s10k/credentials\nchmod 600 ~/.s10k/credentials\n</code></pre> <p>TODO</p>"},{"location":"profiles/#credential-profile-structure","title":"Credential profile structure","text":"<p>The credentials profile file is a TOML file, where each profile starts with a <code>[NAME]</code> line, where <code>NAME</code> is the name of the profile. Following that are <code>key = \"value\"</code> configuration lines. For example, here is a <code>credentials</code> file with two profiles named home and work:</p> <pre><code>[home]\nsn_token_id = \"HOME_TOKEN_ID\"\nsn_token_secret = \"HOME_TOKEN_SECRET\"\n\n[work]\nsn_token_id = \"WORK_TOKEN_ID\"\nsn_token_secret = \"WORK_TOKEN_SECRET\"\n</code></pre>"},{"location":"profiles/#profile-properties","title":"Profile properties","text":"<p>The following properties are supported in each profile:</p> Profile Property Description <code>sn_token_id</code> The SolarNetwork token identifier <code>sn_token_secret</code> The SolarNetwork token secret"},{"location":"commands/","title":"Commands","text":"<p>The <code>s10k</code> tool works as a set of commands and sub-commands, in a sort of command hierachy.</p>"},{"location":"commands/#command-options","title":"Command options","text":"<p>Commands are passed options, which can come in short or long varieties. Short options start with a single dash <code>-</code> and long options start with a double dash <code>--</code>. For example the \"be more verbose\" global opiton can be specified as the short option <code>-v</code> or the long option <code>--verbose</code>.</p>"},{"location":"commands/#toggle-options","title":"Toggle options","text":"<p>Some options just toggle a feature on or off. They do not require an associated value.</p>"},{"location":"commands/#value-options","title":"Value options","text":"<p>Some options require an associated value. The value can be provided after the option and a space or equal sign followed by the desired value. The value can be enclosed in quotes if it includes spaces or other special characters. In the command documentation, options that require a value are shown with an <code>=</code> sign, for example the list datum command supports the <code>-M=</code> or <code>--max=</code> option for a maximum number of results. If you wanted the result to include a maximum of <code>10</code> results, you could specify that in any of the following ways:</p> <ul> <li><code>-M 10</code></li> <li><code>-M=10</code></li> <li><code>--max 10</code></li> <li><code>--max \"10\"</code></li> <li><code>--max=10</code></li> <li><code>--max=\"10\"</code></li> </ul>"},{"location":"commands/#argument-files","title":"Argument files","text":"<p>If you have a repeated set of arguments that you use frequently, you can stash those options in an argument file and then specify that as an <code>@</code>-prefixed path argument. The file content will be treated as arguments, as if they had been passed directly on the command line. The file can be split across lines and even include <code>#</code> prefixed comment lines.</p> <p>For example, if you like to list datum for the same node and source ID frequently, you could create an argument file like this:</p> fav-list-hourly.args<pre><code># list hourly datum for my favorite datum stream in CSV format\n--profile demo\n datum list\n --display-mode CSV\n --node-id 101\n --source-id con/1\n --aggregate Hour\n</code></pre> <p>Then you could list the datum like this:</p> <pre><code>s10k @fav-list-hourly.args --min-date 2025-08-01 --max-date 2025-08-02\n</code></pre> <p>Notice how you can still provide additional arguments after the <code>@</code> argument.</p> <p>Tip</p> <p>The argument files can themselves include other argument files, by including another <code>@</code> argument, for example <code>@other-file.args</code>.</p> <p>Warning</p> <p>If you need to quote an option value in an argument file, you must use a space between the option and the value, not an <code>=</code> character. For example `--myarg \"value with spaces\".</p>"},{"location":"commands/#command-parameters","title":"Command parameters","text":"<p>Some commands accept parameters, which are arguments passed to the command after all options. The syntax of the parameters are command-specific so refer to a command's documentation for more information.</p>"},{"location":"commands/#file-parameters","title":"File parameters","text":"<p>Some commands accept reading input from a file, and you can specify the path to the file after a <code>@@</code> prefix. For example the node meta save command accepts the metadata to save in this manner.</p> <p>Tip</p> <p>When running in a command shell, redirection and pipes can achieve the same thing as <code>@@</code> file input. For example in <code>sh</code> compatible shells, <code>... @@my-file.json</code> could instead be written like <code>&lt;my-file.json</code></p>"},{"location":"commands/datum/","title":"Datum Commands","text":""},{"location":"commands/datum/list/","title":"Datum List","text":"<p>List datum matching a search filter.</p> <p>Info</p> <p>For more details on the SolarNetwork APIs used by this command, see the documentation for the /datum/stream/datum and /datum/stream/reading endpoints.</p>"},{"location":"commands/datum/list/#usage","title":"Usage","text":"<pre><code>s10k datum list [-local] [-recent] [--with-total-result-count]\n                [-agg=&lt;aggregation&gt;] [-max=&lt;maxDate&gt;] [-min=&lt;minDate&gt;]\n                [-mode=&lt;displayMode&gt;] [-pagg=&lt;partialAggregation&gt;]\n                [-read=&lt;readingType&gt;] [-tol=&lt;timeTolerance&gt;]\n                [-tz=&lt;zone&gt;] [-prop=propName[,propName...]]...\n                [-source=sourceId[,sourceId...]]...\n                [-stream=streamId[,streamId...]]...\n                [\n                    -node=nodeId[,nodeId...] [-node=nodeId[,nodeId...]]... |\n                    -loc=locId[,locId...] [-loc=locId[,locId...]]...\n                ]\n</code></pre>"},{"location":"commands/datum/list/#options","title":"Options","text":"Option Long Version Description <code>-stream=</code> <code>--stream-id=</code> the stream ID(s) to show <code>-node=</code> <code>--node-id=</code> the node ID(s) to show metadata for <code>-node=</code> <code>--node-id=</code> the node ID(s) to show stream metadata for (exclusive to <code>-loc</code>) <code>-loc=</code> <code>--location-id=</code> the location ID(s) to show stream metadata for (exclusive to <code>-node</code>) <code>-source=</code> <code>--source=</code> the source ID(s) to show stream metadata for <code>-mode=</code> <code>--display-mode=</code> the format to display the data as, one of <code>CSV</code>, <code>JSON</code>, or <code>PRETTY</code>; defaults to <code>PRETTY</code>; note that <code>PRETTY</code> is not suitable for large result sets <code>-prop=</code> <code>--property=</code> restrict results to metadata that has this property (instantaneous, accumulating, or status); multiple properties combine with logical \"or\" <code>-min=</code> <code>--min-date=</code> a minimum date to limit results to, like <code>2020-10-30</code> or <code>2020-10-30T12:45</code> <code>-max=</code> <code>--max-date=</code> a maximum date (exclusive) to limit results to, in same form as <code>-min</code> <code>-tz=</code> <code>--time-zone=</code> a time zone ID to treat the min/max dates as, instead of the local time zone, like <code>Pacific/Auckland</code> or <code>-05:00</code> or <code>UTC</code> <code>-local</code> <code>--local-dates</code> treat the min/max dates as \"node local\" dates, instead of UTC (or the local time zone when <code>-tz</code> used) <code>-recent</code> <code>--most-recent</code> show just the most recently available data, within min/max dates if specified <code>-agg=</code> <code>--aggregate=</code> the aggregation type to return <code>-pagg=</code> <code>--partial-aggregate=</code> a partial aggregation level to use <code>-read=</code> <code>--reading=</code> return reading aggregation results instead of listing results <code>-tol=</code> <code>--tolerance</code> a time tolerance to use with reading-style queries that support it, as an ISO period like <code>P7D</code> for 7 days <code>-S</code> <code>--show-stream-ids</code> show stream IDs in <code>PRETTY</code> results <code>-M=</code> <code>--max=</code> the maximum number of results to return <code>-O=</code> <code>--offset=</code> start returning results from this offset, <code>0</code> being the first result"},{"location":"commands/datum/list/#output","title":"Output","text":"<p>A listing of all matching datum.</p>"},{"location":"commands/datum/list/#examples","title":"Examples","text":"<p>List hour-level aggregate datum over a date range:</p> List hourly datumPretty OutputCSV OutputJSON Output <pre><code>s10k --profile demo nodes meta list --node-id 101 --source-id con/1 \\\n  --min-date 2025-08-21 --max-date 2025-08-22 --aggregate Hour\n</code></pre> <pre><code>+----------------------+-----------+-----------+----------+---------+---------+-----------+----------+-----------+\n| Timestamp Start      | Object ID | Source ID | watts    | current | voltage | frequency | pcmLimit | wattHours |\n+----------------------+-----------+-----------+----------+---------+---------+-----------+----------+-----------+\n| 2025-08-20T21:00:00Z | 101       | con/1     | 2473.904 |  10.749 | 230.149 |    49.976 |          |    2078.5 |\n+----------------------+-----------+-----------+----------+---------+---------+-----------+----------+-----------+\n| 2025-08-20T22:00:00Z | 101       | con/1     | 2374.817 |  10.308 | 230.273 |    50.004 |          |    2347.3 |\n+----------------------+-----------+-----------+----------+---------+---------+-----------+----------+-----------+\n| 2025-08-20T23:00:00Z | 101       | con/1     | 2570.453 |  11.171 | 230.085 |    50.004 |          | -4254.242 |\n+----------------------+-----------+-----------+----------+---------+---------+-----------+----------+-----------+\n| 2025-08-21T00:00:00Z | 101       | con/1     |   1289.5 |   5.656 | 228.478 |    49.826 |          |     8.442 |\n+----------------------+-----------+-----------+----------+---------+---------+-----------+----------+-----------+\n</code></pre> <pre><code>ts_start,ts_end,streamId,objectId,sourceId,watts,watts_count,watts_min,watts_max,current,current_count,current_min,current_max,voltage,voltage_count,voltage_min,voltage_max,frequency,frequency_count,frequency_min,frequency_max,pcmLimit,pcmLimit_count,pcmLimit_min,pcmLimit_max,wattHours,wattHours_start,wattHours_end,tags\n2025-08-20T21:00:00Z,,03c6bd01-9241-4771-ad3c-a1d5eb06b68a,101,con/1,2473.9038461538461538,52,1153,3518,10.7490174230769231,52,5.0912933,14.998348,230.1490155769230769,52,225.00418,234.99796,49.9755515576923077,52,49.800114,50.199997,,0,,,2078.5,8186363,8225742,\n2025-08-20T22:00:00Z,,03c6bd01-9241-4771-ad3c-a1d5eb06b68a,101,con/1,2374.8166666666666667,60,1130,3501,10.3080711733333333,60,5.0031877,14.948236,230.273054,60,225.00723,234.97006,50.0040209666666667,60,49.800064,50.2,,0,,,2347.3,8225742,8228086,\n2025-08-20T23:00:00Z,,03c6bd01-9241-4771-ad3c-a1d5eb06b68a,101,con/1,2570.4528301886792453,53,1154,3520,11.1705456301886792,53,5.083911,14.998905,230.085467358490566,53,225.00075,234.99974,50.0041884150943396,53,49.80096,50.19986,,0,,,-4254.24152242083932392196,8228086,8223839,\n2025-08-21T00:00:00Z,,03c6bd01-9241-4771-ad3c-a1d5eb06b68a,101,con/1,1289.5,2,1158,1421,5.6555533,2,5.000019,6.3110876,228.477535,2,225.31104,231.64403,49.82638,2,49.800034,49.852726,,0,,,8.44152242083932392196,8223839,8223848,\n</code></pre> <pre><code>{\n    \"success\":true,\n    \"meta\":[\n        {\"streamId\":\"03c6bd01-9241-4771-ad3c-a1d5eb06b68a\",\"zone\":\"Pacific/Auckland\",\"kind\":\"n\",\"objectId\":101,\"sourceId\":\"con/1\",\"i\":[\"watts\",\"current\",\"voltage\",\"frequency\",\"pcmLimit\"],\"a\":[\"wattHours\"]}\n    ],\n    \"data\":[\n        [0,[1755723600000,null],[2473.9038461538461538,52,1153,3518],[10.7490174230769231,52,5.0912933,14.998348],[230.1490155769230769,52,225.00418,234.99796],[49.9755515576923077,52,49.800114,50.199997],[null,0,null,null],[2078.5,8186363,8225742]],\n        [0,[1755727200000,null],[2374.8166666666666667,60,1130,3501],[10.3080711733333333,60,5.0031877,14.948236],[230.273054,60,225.00723,234.97006],[50.0040209666666667,60,49.800064,50.2],[null,0,null,null],[2347.3,8225742,8228086]],\n        [0,[1755730800000,null],[2570.4528301886792453,53,1154,3520],[11.1705456301886792,53,5.083911,14.998905],[230.085467358490566,53,225.00075,234.99974],[50.0041884150943396,53,49.80096,50.19986],[null,0,null,null],[-4254.24152242083932392196,8228086,8223839]],\n        [0,[1755734400000,null],[1289.5,2,1158,1421],[5.6555533,2,5.000019,6.3110876],[228.477535,2,225.31104,231.64403],[49.82638,2,49.800034,49.852726],[null,0,null,null],[8.44152242083932392196,8223839,8223848]]\n    ]\n}\n</code></pre> <p>Show a reading difference between two dates:</p> Show reading differencePretty OutputCSV OutputJSON Output <pre><code>s10k --profile demo nodes meta list --node-id 101 --source-id con/1 \\\n  --min-date 2025-08-21 --max-date 2025-08-22  --reading Difference\n</code></pre> <pre><code>+----------------------+----------------------+-----------+-----------+-----------+\n| Timestamp            | Timestamp End        | Object ID | Source ID | wattHours |\n+----------------------+----------------------+-----------+-----------+-----------+\n| 2025-07-25T20:18:21Z | 2025-08-21T00:08:18Z | 101       | con/1     |     37485 |\n+----------------------+----------------------+-----------+-----------+-----------+\n</code></pre> <pre><code>ts_start,ts_end,streamId,objectId,sourceId,watts,watts_count,watts_min,watts_max,current,current_count,current_min,current_max,voltage,voltage_count,voltage_min,voltage_max,frequency,frequency_count,frequency_min,frequency_max,pcmLimit,pcmLimit_count,pcmLimit_min,pcmLimit_max,wattHours,wattHours_start,wattHours_end,tags\n2025-07-25T20:18:21Z,2025-08-21T00:08:18Z,03c6bd01-9241-4771-ad3c-a1d5eb06b68a,101,con/1,,,,,,,,,,,,,,,,,,,,,37485,8186363,8223848,\n</code></pre> <pre><code>{\n    \"success\":true,\n    \"meta\":[\n        {\"streamId\":\"03c6bd01-9241-4771-ad3c-a1d5eb06b68a\",\"zone\":\"Pacific/Auckland\",\"kind\":\"n\",\"objectId\":101,\"sourceId\":\"con/1\",\"i\":[\"watts\",\"current\",\"voltage\",\"frequency\",\"pcmLimit\"],\"a\":[\"wattHours\"]}\n    ],\n    \"data\":[\n        [0,[1753474701000,1755734898000],null,null,null,null,null,[37485,8186363,8223848]]\n    ]\n}\n</code></pre>"},{"location":"commands/datum/stream/ids/","title":"Datum Stream Ids","text":"<p>Show datum stream metadata IDs matching a search filter.</p>"},{"location":"commands/datum/stream/ids/#usage","title":"Usage","text":"<pre><code>s10k datum stream ids [-mode=&lt;displayMode&gt;]\n                      [-source=sourceId[,sourceId...]]...\n                      [-stream=streamId[,streamId...]]...\n                      [\n                        -node=nodeId[,nodeId...][-node=nodeId[,nodeId...]]... |\n                        -loc=locId[,locId...] [-loc=locId[,locId...]]...\n                       ]\n                      [-prop=propName[,propName...]]...\n                      [-a=propName[,propName...]]...\n                      [-i=propName[,propName...]]...\n                      [-s=propName[,propName...]]...\n</code></pre>"},{"location":"commands/datum/stream/ids/#options","title":"Options","text":"Option Long Version Description <code>-stream=</code> <code>--stream-id=</code> the stream ID(s) to show <code>-node=</code> <code>--node-id=</code> the node ID(s) to show stream metadata for (exclusive to <code>-loc</code>) <code>-loc=</code> <code>--location-id=</code> the location ID(s) to show stream metadata for (exclusive to <code>-node</code>) <code>-source=</code> <code>--source=</code> the source ID(s) to show stream metadata for <code>-mode=</code> <code>--display-mode=</code> the format to display the data as, one of <code>CSV</code>, <code>JSON</code>, or <code>PRETTY</code>; defaults to <code>PRETTY</code> <code>-prop=</code> <code>--property=</code> restrict results to metadata that has this property (instantaneous, accumulating, or status); multiple properties combine with logical \"or\" <code>-i=</code> <code>--instantaneous=</code> restrict results to metadata that has this instantaneous property; multiple properties combine with logical \"and\" <code>-a=</code> <code>--accumulating=</code> restrict results to metadata that has this accumulating property; multiple properties combine with logical \"and\" <code>-s=</code> <code>--status=</code> restrict results to metadata that has this status property; multiple properties combine with logical \"and\""},{"location":"commands/datum/stream/ids/#output","title":"Output","text":"<p>A listing of all matching stream metadata.</p>"},{"location":"commands/datum/stream/ids/#examples","title":"Examples","text":"<p>View all datum stream metadata IDs for a node:</p> Show datum stream metadata IDs for nodePretty OutputCSV OutputJSON Output <pre><code>s10k --profile demo datum stream ids --node-id 101\n</code></pre> <pre><code>+--------------------------------------+------+-----+---------------+\n| Stream ID                            | Kind | ID  | Source ID     |\n+--------------------------------------+------+-----+---------------+\n| f68e81cd-2ac3-4760-b449-16ebce64c15a | Node | 101 | switch/1      |\n+--------------------------------------+------+-----+---------------+\n| 6718cc51-e5fb-43a9-a33f-344bc34916f2 | Node | 101 | power/limit   |\n+--------------------------------------+------+-----+---------------+\n| cc114908-cc0f-4680-a92e-718690742ba9 | Node | 101 | gen/1         |\n+--------------------------------------+------+-----+---------------+\n</code></pre> <pre><code>Stream ID,Kind,ID,Source ID\nf68e81cd-2ac3-4760-b449-16ebce64c15a,Node,101,switch/1\n6718cc51-e5fb-43a9-a33f-344bc34916f2,Node,101,power/limit\ncc114908-cc0f-4680-a92e-718690742ba9,Node,101,gen/1\n</code></pre> <pre><code>[ {\n\"streamId\" : \"f68e81cd-2ac3-4760-b449-16ebce64c15a\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"switch/1\"\n}, {\n\"streamId\" : \"6718cc51-e5fb-43a9-a33f-344bc34916f2\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"power/limit\"\n}, {\n\"streamId\" : \"cc114908-cc0f-4680-a92e-718690742ba9\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"gen/1\"\n} ]\n</code></pre> <p>View all datum stream metadata IDs for a node that has some property named <code>watts</code>:</p> Show datum stream metadata IDs for node with watts propertyPretty OutputCSV OutputJSON Output <pre><code>s10k --profile demo datum stream ids --node-id 101 --property watts\n</code></pre> <pre><code>+--------------------------------------+------+-----+-----------+\n| Stream ID                            | Kind | ID  | Source ID |\n+--------------------------------------+------+-----+-----------+\n| cc114908-cc0f-4680-a92e-718690742ba9 | Node | 101 | gen/1     |\n+--------------------------------------+------+-----+-----------+\n| 0c0fc45d-1e96-40cb-8aa0-07619b3158fd | Node | 101 | con/pcm   |\n+--------------------------------------+------+-----+-----------+\n| 03c6bd01-9241-4771-ad3c-a1d5eb06b68a | Node | 101 | con/1     |\n+--------------------------------------+------+-----+-----------+\n</code></pre> <pre><code>Stream ID,Kind,ID,Source ID\ncc114908-cc0f-4680-a92e-718690742ba9,Node,101,gen/1\n0c0fc45d-1e96-40cb-8aa0-07619b3158fd,Node,101,con/pcm\n03c6bd01-9241-4771-ad3c-a1d5eb06b68a,Node,101,con/1\n</code></pre> <pre><code>[ {\n\"streamId\" : \"cc114908-cc0f-4680-a92e-718690742ba9\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"gen/1\"\n}, {\n\"streamId\" : \"0c0fc45d-1e96-40cb-8aa0-07619b3158fd\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"con/pcm\"\n}, {\n\"streamId\" : \"03c6bd01-9241-4771-ad3c-a1d5eb06b68a\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"con/1\"\n} ]\n</code></pre> <p>Find all source IDs for a node where the datum stream has an instantaneous property named <code>voltage</code> and an accumulating property named <code>wattHours</code>:</p> Find source IDs with voltage, wattHours propertiesOutput <pre><code>s10k --profile demo datum stream ids --instantaneous voltage \\\n  --accumulating wattHours --mode JSON \\\n  |jq -r 'map(.sourceId) | join(\",\")'\n</code></pre> <pre><code>con/1,con/pcm,gen/1\n</code></pre> <p>View all datum stream metadata IDs that have an instantaneous property named <code>pcmLimit</code> and an accumulating property named <code>wattHours</code>:</p> Show datum stream metadata IDs with pcmLimit, wattHours propertiesPretty OutputCSV OutputJSON Output <pre><code>s10k --profile demo datum stream ids --instantaneous pcmLimit \\\n  --accumulating wattHours\n</code></pre> <pre><code>+--------------------------------------+------+-----+-----------+\n| Stream ID                            | Kind | ID  | Source ID |\n+--------------------------------------+------+-----+-----------+\n| 2e16deac-bd95-4d4b-9668-4441f48aea17 | Node |  64 | /meter/1  |\n+--------------------------------------+------+-----+-----------+\n| a73f4797-d9aa-4496-b96c-04ad934b1550 | Node |  64 | /meter/2  |\n+--------------------------------------+------+-----+-----------+\n| 2d19d690-2472-480d-afc0-240f830d4cd5 | Node |  70 | meter/1   |\n+--------------------------------------+------+-----+-----------+\n| 03c6bd01-9241-4771-ad3c-a1d5eb06b68a | Node | 101 | con/1     |\n+--------------------------------------+------+-----+-----------+\n| 0c0fc45d-1e96-40cb-8aa0-07619b3158fd | Node | 101 | con/pcm   |\n+--------------------------------------+------+-----+-----------+\n| cc114908-cc0f-4680-a92e-718690742ba9 | Node | 101 | gen/1     |\n+--------------------------------------+------+-----+-----------+\n</code></pre> <pre><code>Stream ID,Kind,ID,Source ID\n2e16deac-bd95-4d4b-9668-4441f48aea17,Node,64,/meter/1\na73f4797-d9aa-4496-b96c-04ad934b1550,Node,64,/meter/2\n2d19d690-2472-480d-afc0-240f830d4cd5,Node,70,meter/1\n03c6bd01-9241-4771-ad3c-a1d5eb06b68a,Node,101,con/1\n0c0fc45d-1e96-40cb-8aa0-07619b3158fd,Node,101,con/pcm\ncc114908-cc0f-4680-a92e-718690742ba9,Node,101,gen/1\n</code></pre> <pre><code>[ {\n\"streamId\" : \"2e16deac-bd95-4d4b-9668-4441f48aea17\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 64,\n\"sourceId\" : \"/meter/1\"\n}, {\n\"streamId\" : \"a73f4797-d9aa-4496-b96c-04ad934b1550\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 64,\n\"sourceId\" : \"/meter/2\"\n}, {\n\"streamId\" : \"2d19d690-2472-480d-afc0-240f830d4cd5\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 70,\n\"sourceId\" : \"meter/1\"\n}, {\n\"streamId\" : \"03c6bd01-9241-4771-ad3c-a1d5eb06b68a\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"con/1\"\n}, {\n\"streamId\" : \"0c0fc45d-1e96-40cb-8aa0-07619b3158fd\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"con/pcm\"\n}, {\n\"streamId\" : \"cc114908-cc0f-4680-a92e-718690742ba9\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"gen/1\"\n} ]\n</code></pre>"},{"location":"commands/datum/stream/list/","title":"Datum Stream List","text":"<p>Show datum stream metadata matching a search filter.</p>"},{"location":"commands/datum/stream/list/#usage","title":"Usage","text":"<pre><code>s10k datum stream list [-mode=&lt;displayMode&gt;]\n                       [-source=sourceId[,sourceId...]]...\n                       [-stream=streamId[,streamId...]]...\n                       [\n                         -node=nodeId[,nodeId...][-node=nodeId[,nodeId...]]... |\n                         -loc=locId[,locId...] [-loc=locId[,locId...]]...\n                        ]\n                       [-prop=propName[,propName...]]...\n                       [-a=propName[,propName...]]...\n                       [-i=propName[,propName...]]...\n                       [-s=propName[,propName...]]...\n</code></pre>"},{"location":"commands/datum/stream/list/#options","title":"Options","text":"Option Long Version Description <code>-stream=</code> <code>--stream-id=</code> the stream ID(s) to show <code>-node=</code> <code>--node-id=</code> the node ID(s) to show stream metadata for (exclusive to <code>-loc</code>) <code>-loc=</code> <code>--location-id=</code> the location ID(s) to show stream metadata for (exclusive to <code>-node</code>) <code>-source=</code> <code>--source=</code> the source ID(s) to show stream metadata for <code>-mode=</code> <code>--display-mode=</code> the format to display the data as, one of <code>CSV</code>, <code>JSON</code>, or <code>PRETTY</code>; defaults to <code>PRETTY</code> <code>-prop=</code> <code>--property=</code> restrict results to metadata that has this property (instantaneous, accumulating, or status); multiple properties combine with logical \"or\" <code>-i=</code> <code>--instantaneous=</code> restrict results to metadata that has this instantaneous property; multiple properties combine with logical \"and\" <code>-a=</code> <code>--accumulating=</code> restrict results to metadata that has this accumulating property; multiple properties combine with logical \"and\" <code>-s=</code> <code>--status=</code> restrict results to metadata that has this status property; multiple properties combine with logical \"and\""},{"location":"commands/datum/stream/list/#output","title":"Output","text":"<p>A listing of all matching stream metadata.</p>"},{"location":"commands/datum/stream/list/#examples","title":"Examples","text":"<p>View all datum stream metadata for a node:</p> Show datum stream metadata for nodePretty OutputCSV OutputJSON Output <pre><code>s10k --profile demo datum stream list --node-id 101\n</code></pre> <pre><code>+--------------------------------------+------+-----+---------------+------------------+---------------------------------+--------------+--------+\n| Stream ID                            | Kind | ID  | Source ID     | Time Zone        | Instantaneous                   | Accumulating | Status |\n+--------------------------------------+------+-----+---------------+------------------+---------------------------------+--------------+--------+\n| f68e81cd-2ac3-4760-b449-16ebce64c15a | Node | 101 | switch/1      | Pacific/Auckland |                                 |              | val    |\n+--------------------------------------+------+-----+---------------+------------------+---------------------------------+--------------+--------+\n| 6718cc51-e5fb-43a9-a33f-344bc34916f2 | Node | 101 | power/limit   | Pacific/Auckland | v                               |              | val    |\n+--------------------------------------+------+-----+---------------+------------------+---------------------------------+--------------+--------+\n| cc114908-cc0f-4680-a92e-718690742ba9 | Node | 101 | gen/1         | Pacific/Auckland | current,frequency,voltage,watts | wattHours    |        |\n+--------------------------------------+------+-----+---------------+------------------+---------------------------------+--------------+--------+\n</code></pre> <pre><code>Stream ID,Kind,ID,Source ID,Time Zone,Instantaneous,Accumulating,Status\nf68e81cd-2ac3-4760-b449-16ebce64c15a,Node,101,switch/1,Pacific/Auckland,,,val\n6718cc51-e5fb-43a9-a33f-344bc34916f2,Node,101,power/limit,Pacific/Auckland,v,,val\ncc114908-cc0f-4680-a92e-718690742ba9,Node,101,gen/1,Pacific/Auckland,\"current,frequency,voltage,watts\",wattHours,\n</code></pre> <pre><code>[ {\n\"streamId\" : \"f68e81cd-2ac3-4760-b449-16ebce64c15a\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"switch/1\",\n\"s\" : [ \"val\" ]\n}, {\n\"streamId\" : \"6718cc51-e5fb-43a9-a33f-344bc34916f2\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"power/limit\",\n\"i\" : [ \"v\" ],\n\"s\" : [ \"val\" ]\n}, {\n\"streamId\" : \"cc114908-cc0f-4680-a92e-718690742ba9\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"gen/1\",\n\"i\" : [ \"watts\", \"current\", \"voltage\", \"frequency\" ],\n\"a\" : [ \"wattHours\" ]\n} ]\n</code></pre> <p>View all datum stream metadata for a node that has some property named <code>watts</code>:</p> Show datum stream metadata for node with watts propertyPretty OutputCSV OutputJSON Output <pre><code>s10k --profile demo datum stream list --node-id 101 --property watts\n</code></pre> <pre><code>+--------------------------------------+------+-----+-----------+------------------+------------------------------------------+--------------+--------+\n| Stream ID                            | Kind | ID  | Source ID | Time Zone        | Instantaneous                            | Accumulating | Status |\n+--------------------------------------+------+-----+-----------+------------------+------------------------------------------+--------------+--------+\n| cc114908-cc0f-4680-a92e-718690742ba9 | Node | 101 | gen/1     | Pacific/Auckland | current,frequency,voltage,watts          | wattHours    |        |\n+--------------------------------------+------+-----+-----------+------------------+------------------------------------------+--------------+--------+\n| 0c0fc45d-1e96-40cb-8aa0-07619b3158fd | Node | 101 | con/pcm   | Pacific/Auckland | current,frequency,pcmLimit,voltage,watts | wattHours    |        |\n+--------------------------------------+------+-----+-----------+------------------+------------------------------------------+--------------+--------+\n| 03c6bd01-9241-4771-ad3c-a1d5eb06b68a | Node | 101 | con/1     | Pacific/Auckland | current,frequency,pcmLimit,voltage,watts | wattHours    |        |\n+--------------------------------------+------+-----+-----------+------------------+------------------------------------------+--------------+--------+\n</code></pre> <pre><code>Stream ID,Kind,ID,Source ID,Time Zone,Instantaneous,Accumulating,Status\ncc114908-cc0f-4680-a92e-718690742ba9,Node,101,gen/1,Pacific/Auckland,\"current,frequency,voltage,watts\",wattHours,\n0c0fc45d-1e96-40cb-8aa0-07619b3158fd,Node,101,con/pcm,Pacific/Auckland,\"current,frequency,pcmLimit,voltage,watts\",wattHours,\n03c6bd01-9241-4771-ad3c-a1d5eb06b68a,Node,101,con/1,Pacific/Auckland,\"current,frequency,pcmLimit,voltage,watts\",wattHours,\n</code></pre> <pre><code>[ {\n\"streamId\" : \"cc114908-cc0f-4680-a92e-718690742ba9\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"gen/1\",\n\"i\" : [ \"watts\", \"current\", \"voltage\", \"frequency\" ],\n\"a\" : [ \"wattHours\" ]\n}, {\n\"streamId\" : \"0c0fc45d-1e96-40cb-8aa0-07619b3158fd\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"con/pcm\",\n\"i\" : [ \"watts\", \"current\", \"voltage\", \"pcmLimit\", \"frequency\" ],\n\"a\" : [ \"wattHours\" ]\n}, {\n\"streamId\" : \"03c6bd01-9241-4771-ad3c-a1d5eb06b68a\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"con/1\",\n\"i\" : [ \"watts\", \"current\", \"voltage\", \"frequency\", \"pcmLimit\" ],\n\"a\" : [ \"wattHours\" ]\n} ]\n</code></pre> <p>View all datum stream metadata that has an instantaneous property named <code>pcmLimit</code> and an accumulating property named <code>wattHours</code>:</p> Show datum stream metadata with pcmLimit, wattHours propertiesPretty OutputCSV OutputJSON Output <pre><code>s10k --profile demo datum stream list --instantaneous pcmLimit \\\n  --accumulating wattHours\n</code></pre> <pre><code>+--------------------------------------+------+-----+-----------+------------------+--------------------------------------------------------------------------------+-------------------+--------+\n| Stream ID                            | Kind | ID  | Source ID | Time Zone        | Instantaneous                                                                  | Accumulating      | Status |\n+--------------------------------------+------+-----+-----------+------------------+--------------------------------------------------------------------------------+-------------------+--------+\n| 2e16deac-bd95-4d4b-9668-4441f48aea17 | Node |  64 | /meter/1  | Pacific/Auckland | apparentPower,current,frequency,phaseVoltage,powerFactor,reactivePower,realPow | wattHours         |        |\n|                                      |      |     |           |                  | er,voltage,watts                                                               |                   |        |\n+--------------------------------------+------+-----+-----------+------------------+--------------------------------------------------------------------------------+-------------------+--------+\n| a73f4797-d9aa-4496-b96c-04ad934b1550 | Node |  64 | /meter/2  | Pacific/Auckland | apparentPower,current,frequency,phaseVoltage,powerFactor,reactivePower,realPow | wattHours         |        |\n|                                      |      |     |           |                  | er,voltage,watts                                                               |                   |        |\n+--------------------------------------+------+-----+-----------+------------------+--------------------------------------------------------------------------------+-------------------+--------+\n| 2d19d690-2472-480d-afc0-240f830d4cd5 | Node |  70 | meter/1   | Pacific/Auckland | current,frequency,voltage,watts                                                | wattHours,wh_half |        |\n+--------------------------------------+------+-----+-----------+------------------+--------------------------------------------------------------------------------+-------------------+--------+\n| 03c6bd01-9241-4771-ad3c-a1d5eb06b68a | Node | 101 | con/1     | Pacific/Auckland | current,frequency,pcmLimit,voltage,watts                                       | wattHours         |        |\n+--------------------------------------+------+-----+-----------+------------------+--------------------------------------------------------------------------------+-------------------+--------+\n| 0c0fc45d-1e96-40cb-8aa0-07619b3158fd | Node | 101 | con/pcm   | Pacific/Auckland | current,frequency,pcmLimit,voltage,watts                                       | wattHours         |        |\n+--------------------------------------+------+-----+-----------+------------------+--------------------------------------------------------------------------------+-------------------+--------+\n| cc114908-cc0f-4680-a92e-718690742ba9 | Node | 101 | gen/1     | Pacific/Auckland | current,frequency,voltage,watts                                                | wattHours         |        |\n+--------------------------------------+------+-----+-----------+------------------+--------------------------------------------------------------------------------+-------------------+--------+\n</code></pre> <pre><code>Stream ID,Kind,ID,Source ID,Time Zone,Instantaneous,Accumulating,Status\n2e16deac-bd95-4d4b-9668-4441f48aea17,Node,64,/meter/1,Pacific/Auckland,\"apparentPower,current,frequency,phaseVoltage,powerFactor,reactivePower,realPower,voltage,watts\",wattHours,\na73f4797-d9aa-4496-b96c-04ad934b1550,Node,64,/meter/2,Pacific/Auckland,\"apparentPower,current,frequency,phaseVoltage,powerFactor,reactivePower,realPower,voltage,watts\",wattHours,\n2d19d690-2472-480d-afc0-240f830d4cd5,Node,70,meter/1,Pacific/Auckland,\"current,frequency,voltage,watts\",\"wattHours,wh_half\",\n03c6bd01-9241-4771-ad3c-a1d5eb06b68a,Node,101,con/1,Pacific/Auckland,\"current,frequency,pcmLimit,voltage,watts\",wattHours,\n0c0fc45d-1e96-40cb-8aa0-07619b3158fd,Node,101,con/pcm,Pacific/Auckland,\"current,frequency,pcmLimit,voltage,watts\",wattHours,\ncc114908-cc0f-4680-a92e-718690742ba9,Node,101,gen/1,Pacific/Auckland,\"current,frequency,voltage,watts\",wattHours,\n</code></pre> <pre><code>[ {\n\"streamId\" : \"2e16deac-bd95-4d4b-9668-4441f48aea17\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 64,\n\"sourceId\" : \"/meter/1\",\n\"i\" : [ \"watts\", \"current\", \"voltage\", \"frequency\", \"realPower\", \"powerFactor\", \"phaseVoltage\", \"apparentPower\", \"reactivePower\" ],\n\"a\" : [ \"wattHours\" ]\n}, {\n\"streamId\" : \"a73f4797-d9aa-4496-b96c-04ad934b1550\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 64,\n\"sourceId\" : \"/meter/2\",\n\"i\" : [ \"watts\", \"current\", \"voltage\", \"frequency\", \"realPower\", \"powerFactor\", \"phaseVoltage\", \"apparentPower\", \"reactivePower\" ],\n\"a\" : [ \"wattHours\" ]\n}, {\n\"streamId\" : \"2d19d690-2472-480d-afc0-240f830d4cd5\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 70,\n\"sourceId\" : \"meter/1\",\n\"i\" : [ \"watts\", \"current\", \"voltage\", \"frequency\" ],\n\"a\" : [ \"wattHours\", \"wh_half\" ]\n}, {\n\"streamId\" : \"03c6bd01-9241-4771-ad3c-a1d5eb06b68a\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"con/1\",\n\"i\" : [ \"watts\", \"current\", \"voltage\", \"frequency\", \"pcmLimit\" ],\n\"a\" : [ \"wattHours\" ]\n}, {\n\"streamId\" : \"0c0fc45d-1e96-40cb-8aa0-07619b3158fd\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"con/pcm\",\n\"i\" : [ \"watts\", \"current\", \"voltage\", \"pcmLimit\", \"frequency\" ],\n\"a\" : [ \"wattHours\" ]\n}, {\n\"streamId\" : \"cc114908-cc0f-4680-a92e-718690742ba9\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"gen/1\",\n\"i\" : [ \"watts\", \"current\", \"voltage\", \"frequency\" ],\n\"a\" : [ \"wattHours\" ]\n} ]\n</code></pre>"},{"location":"commands/datum/stream/view/","title":"Datum Stream View","text":"<p>View a specific datum stream metadata.</p>"},{"location":"commands/datum/stream/view/#usage","title":"Usage","text":"<pre><code>s10k datum stream view [-mode=&lt;displayMode&gt;] -stream=streamId\n</code></pre>"},{"location":"commands/datum/stream/view/#options","title":"Options","text":"Option Long Version Description <code>-stream=</code> <code>--stream-id=</code> the stream ID to show <code>-mode=</code> <code>--display-mode=</code> the format to display the data as, one of <code>CSV</code>, <code>JSON</code>, or <code>PRETTY</code>; defaults to <code>PRETTY</code>"},{"location":"commands/datum/stream/view/#output","title":"Output","text":"<p>A table of datum stream metadata properties.</p>"},{"location":"commands/datum/stream/view/#examples","title":"Examples","text":"View datum stream metadataPretty OutputCSV OutputJSON Output <pre><code>s10k --profile demo datum stream view --stream-id cc114908-cc0f-4680-a92e-718690742ba9\n</code></pre> <pre><code>+---------------+--------------------------------------+\n| Property      | Value                                |\n+---------------+--------------------------------------+\n| Stream ID     | cc114908-cc0f-4680-a92e-718690742ba9 |\n+---------------+--------------------------------------+\n| Kind          | Node                                 |\n+---------------+--------------------------------------+\n| ID            | 101                                  |\n+---------------+--------------------------------------+\n| Source ID     | gen/1                                |\n+---------------+--------------------------------------+\n| Time Zone     | Pacific/Auckland                     |\n+---------------+--------------------------------------+\n| Instantaneous | watts,current,voltage,frequency      |\n+---------------+--------------------------------------+\n| Accumulating  | wattHours                            |\n+---------------+--------------------------------------+\n| Status        |                                      |\n+---------------+--------------------------------------+\n</code></pre> <pre><code>Stream ID,Kind,ID,Source ID,Time Zone,Instantaneous,Accumulating,Status\ncc114908-cc0f-4680-a92e-718690742ba9,Node,101,gen/1,Pacific/Auckland,\"current,frequency,voltage,watts\",wattHours,\n</code></pre> <pre><code>{\n\"streamId\" : \"cc114908-cc0f-4680-a92e-718690742ba9\",\n\"zone\" : \"Pacific/Auckland\",\n\"kind\" : \"n\",\n\"objectId\" : 101,\n\"sourceId\" : \"gen/1\",\n\"i\" : [ \"watts\", \"current\", \"voltage\", \"frequency\" ],\n\"a\" : [ \"wattHours\" ]\n}\n</code></pre>"},{"location":"commands/instructions/","title":"Instructions Commands","text":"<p>The <code>instructions</code> group of commands deal with SolarNode instructions, which are actions you can ask a node to perform, and the node confirms the outcome of the action, possibly providing result data.</p> <p>Instructions in SolarNetwork have a topic that is the name of an action the node should perform. Examples of topics are <code>SetControlParameter</code> to set a control to some value, or <code>SystemReboot</code> to reboot the node device.</p> <p>Instructions then have an associated state that evolves over the lifetime of the instruction. In general an instruction transitions between the following states:</p> State Description <code>Queuing</code> The instruction is being queued for delivery to the node, but not acknowledged by the node yet. <code>Queued</code> The instruction has been queued for delivery to the node, but not acknowledged by the node yet. <code>Received</code> The instruction has been delivered to the node and the node has acknowledged receiving the instruction, but has not been executed yet. <code>Executing</code> The node is currently executing the instruction. <code>Completed</code> The node has finished executing the instruction. <p>There is also a <code>Declined</code> state, when the node has rejected the instruction and will not execute it.</p> <p>Instructions are processed asynchronously, and instructions proceed through these states over time as instructions created in SolarNetwork and then transmitted to the node, executed on the node, and finally reported as <code>Completed</code> or <code>Declined</code>.</p> <p>For more details on how instructions work, see here.</p> <p>Info</p> <p>Instruction records are purged from SolarNetwork automatically over time, once they reach their final <code>Completed</code> or <code>Declined</code> state.</p>"},{"location":"commands/instructions/list/","title":"Instructions List","text":"<p>Show instructions matching a search filter.</p>"},{"location":"commands/instructions/list/#usage","title":"Usage","text":"<pre><code>s10k instructions list [-max=&lt;maxDate&gt;] [-min=&lt;minDate&gt;] [-tz=&lt;zone&gt;]\n                       [-id=instructionId[,instructionId...]]...\n                       [-node=nodeId[,nodeId...]]...\n                       [-state=state[,state...]]...\n</code></pre>"},{"location":"commands/instructions/list/#options","title":"Options","text":"Option Long Version Description <code>-id=</code> <code>--instruction-id=</code> the instruction ID(s) to show <code>-node=</code> <code>--node-id=</code> the node ID to show instructions for <code>-state=</code> <code>--state=</code> an instruction state to limit results to <code>-min=</code> <code>--min-date=</code> a minimum date to limit results to, like <code>2020-10-30</code> or <code>2020-10-30T12:45</code> <code>-max=</code> <code>--max-date=</code> a maximum date (exclusive) to limit results to, in same form as <code>-min</code> <code>-tz=</code> <code>--time-zone=</code> a time zone ID to treat the min/max dates as, instead of the local time zone, like <code>Pacific/Auckland</code> or <code>-05:00</code> or <code>UTC</code>"},{"location":"commands/instructions/list/#output","title":"Output","text":"<p>A listing of all matching instruction records.</p>"},{"location":"commands/instructions/list/#examples","title":"Examples","text":"<p>You can show one exact instruction using its ID like this:</p> Show instruction for IDOutput <pre><code>s10k --profile demo instructions list --node-id 101 --instruction-id 123\n</code></pre> <pre><code>Property Value\n-----------------------------------------------------------\nid       123\ntopic    SetControlParameter\nstate    Completed\ndate     2025-08-30T17:11:01.741346+12:00[Pacific/Auckland]\nparams   Parameter     Value\n         -------------------\n         switch/1      1\n</code></pre> <p>You can show all instructions</p> Show completed instructions for nodeOutput <pre><code># using multiple options\ns10k --profile demo instructions list --node-id 101 --state Completed\n</code></pre> <pre><code>Property Value\n-----------------------------------------------------------\nid       123\ntopic    SetControlParameter\nstate    Completed\ndate     2025-08-27T18:08:16.858044+12:00[Pacific/Auckland]\nparams   Parameter     Value\n         -------------------\n         switch/1      1\n\nProperty Value\n-----------------------------------------------------------\nid       124\ntopic    SetControlParameter\nstate    Completed\ndate     2025-08-27T18:10:14.521734+12:00[Pacific/Auckland]\nparams   Parameter     Value\n         -------------------\n         switch/1      0\n</code></pre>"},{"location":"commands/instructions/update-state/","title":"Instructions Update-State","text":"<p>Change the state of instructions matching a search filter. Pass the desired instruction state as the first (and only) parameter.</p>"},{"location":"commands/instructions/update-state/#usage","title":"Usage","text":"<pre><code>s10k instructions update-state [-max=&lt;maxDate&gt;] [-min=&lt;minDate&gt;] [-tz=&lt;zone&gt;]\n                       [-id=instructionId[,instructionId...]]...\n                       [-node=nodeId[,nodeId...]]...\n                       [-state=state[,state...]]...\n                       &lt;desiredState&gt;\n</code></pre>"},{"location":"commands/instructions/update-state/#options","title":"Options","text":"Option Long Version Description <code>-id=</code> <code>--instruction-id=</code> the instruction ID(s) to show <code>-node=</code> <code>--node-id=</code> the node ID to show instructions for <code>-state=</code> <code>--state=</code> an instruction state to limit results to <code>-min=</code> <code>--min-date=</code> a minimum date to limit results to, like <code>2020-10-30</code> or <code>2020-10-30T12:45</code> <code>-max=</code> <code>--max-date=</code> a maximum date (exclusive) to limit results to, in same form as <code>-min</code> <code>-tz=</code> <code>--time-zone=</code> a time zone ID to treat the min/max dates as, instead of the local time zone, like <code>Pacific/Auckland</code> or <code>-05:00</code> or <code>UTC</code>"},{"location":"commands/instructions/update-state/#output","title":"Output","text":"<p>A listing of all matching instruction records.</p>"},{"location":"commands/instructions/update-state/#examples","title":"Examples","text":"<p>Update a set of <code>Queued</code> instructions in a date range to <code>Declined</code>:</p> Show instruction for IDOutput <pre><code>s10k --profile demo instructions update-state --node-id 1011 --state Declined Received\n</code></pre> <pre><code>Updated 6 instructions to Declined: 123,124,125,126,127,128\n</code></pre>"},{"location":"commands/instructions/controls/set-operating-state/","title":"Instructions Controls Set-Operating-State","text":"<p>Update the operating state of a SolarNode component. Pass the desired operating state as the first (and only) parameter.</p>"},{"location":"commands/instructions/controls/set-operating-state/#usage","title":"Usage","text":"<pre><code>s10k instructions controls set-operating-state -control=&lt;controlId&gt;\n                           -node=&lt;nodeId&gt; desiredState\n</code></pre>"},{"location":"commands/instructions/controls/set-operating-state/#options","title":"Options","text":"Option Long Version Description <code>-control=</code> <code>--control-id=</code> the control ID to set the operating state on <code>-node=</code> <code>--node-id=</code> the node ID with the control to update"},{"location":"commands/instructions/controls/set-operating-state/#output","title":"Output","text":"<p>A status message about the result of the instruction.</p>"},{"location":"commands/instructions/controls/set-operating-state/#examples","title":"Examples","text":"<p>Update a component to \"standby\" mode:</p> Set component operating stateOutput <pre><code>s10k --profile demo instructions controls set-operating-state --node-id 101 \\\n  --control-id pump/1 Standby\n</code></pre> <pre><code>Control [pump/1] operating state set to [Standby]\n</code></pre>"},{"location":"commands/instructions/controls/set/","title":"Instructions Controls Set","text":"<p>Update the value of a SolarNode control. Pass the desired control value as the first (and only) parameter.</p>"},{"location":"commands/instructions/controls/set/#usage","title":"Usage","text":"<pre><code>s10k instructions controls set -control=&lt;controlId&gt; -node=&lt;nodeId&gt; desiredValue\n</code></pre>"},{"location":"commands/instructions/controls/set/#options","title":"Options","text":"Option Long Version Description <code>-control=</code> <code>--control-id=</code> the control ID to update <code>-node=</code> <code>--node-id=</code> the node ID with the control to update"},{"location":"commands/instructions/controls/set/#output","title":"Output","text":"<p>A status message about the result of the instruction.</p>"},{"location":"commands/instructions/controls/set/#examples","title":"Examples","text":"<p>Update a switch-type boolean control to \"on\" (using <code>1</code> to represent \"on\"):</p> Set boolean control to 'on'Output <pre><code>s10k --profile demo instructions controls set --node-id 101 \\\n  --control-id switch/1 1\n</code></pre> <pre><code>Control [switch/1] set to [1]\n</code></pre>"},{"location":"commands/nodes/","title":"Nodes Commands","text":"<p>The <code>nodes</code> group of commands deal with SolarNode related actions.</p>"},{"location":"commands/nodes/meta/","title":"Nodes Meta Commands","text":"<p>The <code>nodes meta</code> commands deal with SolarNode metadata, which is metadata associated with a specific node. Node metadata is both published and consumed by nodes. For example nodes publish metadata about themselves (like hardware architecture and version); node metadata can be easily used in node expressions, which makes it a good candidate for node-level parameters that do not change too frequently.</p>"},{"location":"commands/nodes/meta/csv-get/","title":"Nodes Meta CSV-Get","text":"<p>Extract CSV from node metadata at a specific metadata key path. CSV metadata is often used for tariff schedules in SolarNode, such as tariff schedule expressions.</p>"},{"location":"commands/nodes/meta/csv-get/#usage","title":"Usage","text":"<pre><code>s10k nodes meta csv-get [-mode=&lt;displayMode&gt;] -node=&lt;nodeId&gt;\n                        [-path=&lt;metadataPath&gt;]\n</code></pre>"},{"location":"commands/nodes/meta/csv-get/#options","title":"Options","text":"Option Long Version Description <code>-node=</code> <code>--node-id=</code> the node ID to get metadata from <code>-path=</code> <code>--path=</code> the key path with the CSV data to extract <code>-mode=</code> <code>--display-mode=</code> the format to display the data as, one of <code>CSV</code>, <code>JSON</code>, or <code>PRETTY</code>; defaults to <code>PRETTY</code>"},{"location":"commands/nodes/meta/csv-get/#output","title":"Output","text":"<p>The CSV data, formatted according to the <code>--display-mode</code> option.</p>"},{"location":"commands/nodes/meta/csv-get/#examples","title":"Examples","text":"<p>Show CSV data in the default formatting:</p> Show CSV with pretty formattingOutput <pre><code>s10k --profile demo nodes meta csv-get --node-id 101 --path /pm/cpd/schedule\n</code></pre> <pre><code>+-----------------+-----+---------+------+-----------------+\n|           Month | Day | Weekday | Time | cpdPeriodActive |\n+-----------------+-----+---------+------+-----------------+\n| Jan-Apr,Oct-Dec |     |         |      |               0 |\n+-----------------+-----+---------+------+-----------------+\n|         May-Sep |     |         |      |               1 |\n+-----------------+-----+---------+------+-----------------+\n</code></pre> <p>The same data can be output as CSV as well:</p> Show CSV with CSV formattingOutput <pre><code>s10k --profile demo nodes meta csv-get --node-id 101 --path /pm/cpd/schedule \\\n     --display-mode CSV\n</code></pre> <pre><code>Month,Day,Weekday,Time,cpdPeriodActive\n\"Jan-Apr,Oct-Dec\",,,,0\nMay-Sep,,,,1\n</code></pre> <p>The same data can be output as JSON as well:</p> Show CSV with JSON formattingOutput <pre><code>s10k --profile demo nodes meta csv-get --node-id 101 --path /pm/cpd/schedule \\\n     --display-mode JSON\n</code></pre> <pre><code>[\n  [ \"Month\", \"Day\", \"Weekday\", \"Time\", \"cpdPeriodActive\" ],\n  [ \"Jan-Apr,Oct-Dec\", null, null, null, \"0\" ],\n  [ \"May-Sep\", null, null, null, \"1\" ]\n]\n</code></pre>"},{"location":"commands/nodes/meta/csv-set/","title":"Nodes Meta CSV-Set","text":"<p>Save CSV data to node metadata at a specific metadata key path. CSV metadata is often used for tariff schedules in SolarNode, such as tariff schedule expressions.</p>"},{"location":"commands/nodes/meta/csv-set/#usage","title":"Usage","text":"<pre><code>s10k nodes meta csv-set [-s] [-mode=&lt;displayMode&gt;] -node=&lt;nodeId&gt;\n                        [-path=&lt;metadataPath&gt;] [&lt;csv&gt;]\n</code></pre>"},{"location":"commands/nodes/meta/csv-set/#options","title":"Options","text":"Option Long Version Description <code>-node=</code> <code>--node-id=</code> the node ID to get metadata from <code>-path=</code> <code>--path=</code> the key path with the CSV data to extract <code>-mode=</code> <code>--display-mode=</code> if <code>--verbose</code> then the format to display the saved data as, one of <code>CSV</code>, <code>JSON</code>, or <code>PRETTY</code>; defaults to <code>PRETTY</code> <code>-s</code> <code>--string</code> encode the CSV as a JSON string, intead of JSON arrays"},{"location":"commands/nodes/meta/csv-set/#output","title":"Output","text":"<p>A success message. If the <code>--verbose</code> option specified then this will be followed by a pretty-printed copy of the saved CSV data, formatted according to the <code>--display-mode</code> option.</p>"},{"location":"commands/nodes/meta/csv-set/#string-mode","title":"String mode","text":"<p>The <code>--string</code> option lets you encode the CSV data as a metadata string value, rather than the default method of encoding it as arrays. For example take this sample CSV data:</p> <pre><code>Month,Day,Weekday,Time,cpdPeriodActive\n\"Jan-Apr,Oct-Dec\",,,,0\nMay-Sep,,,,1\n</code></pre> <p>Here is how it would be saved as metadata at the key path <code>/pm/cpd/schedule</code> normally, and with the <code>--string</code> option:</p> Normal CSV metadataString CSV metadata <pre><code>{\n    \"pm\" : {\n        \"cpd\" : {\n            \"schedule\" : [\n                [ \"Month\", \"Day\", \"Weekday\", \"Time\", \"cpdPeriodActive\" ],\n                [ \"Jan-Apr,Oct-Dec\", null, null, null, \"0\" ],\n                [ \"May-Sep\", null, null, null, \"1\" ]\n            ]\n        }\n    }\n}\n</code></pre> <pre><code>{\n    \"pm\" : {\n        \"cpd\" : {\n            \"schedule\" : \"Month,Day,Weekday,Time,cpdPeriodActive\\r\\n\\\"Jan-Apr,Oct-Dec\\\",,,,0\\r\\nMay-Sep,,,,1\"\n        }\n    }\n}\n</code></pre>"},{"location":"commands/nodes/meta/csv-set/#examples","title":"Examples","text":"<p>The data to save can be provided directly as a command argument, for example:</p> CSV as command argument<pre><code>s10k --profile demo nodes meta csv-set --node-id 101 \\\n  --path /pm/cpd/schedule 'Key,Value\\nA,B'\n</code></pre> <p>A file with the data can be referenced using <code>@@</code> followed by the file path:</p> CSV as a file<pre><code>s10k --profile demo nodes meta csv-set --node-id 101 \\\n  --path /pm/cpd/schedule @@/path/to/data.csv\n</code></pre> <p>The data can be read from standard input, like this:</p> CSV read from standard input<pre><code>s10k --profile demo nodes meta csv-set --node-id 101 \\\n  --path /pm/cpd/schedule &lt;/path/to/data.csv\n</code></pre> <p>Similarly, the metadata content can be piped to the command, like this:</p> ExampleOutput Metadata piped from standard input<pre><code>cat /path/to/data.csv |s10k --verbose --profile demo nodes meta csv-set \\\n  --node-id 101 --path /pm/cpd/schedule --display-mode JSON\n</code></pre> <pre><code>CSV saved to to path [/pm/cpd/schedule].\n[\n  [ \"Month\", \"Day\", \"Weekday\", \"Time\", \"cpdPeriodActive\" ],\n  [ \"Jan-Apr,Oct-Dec\", null, null, null, \"0\" ],\n  [ \"May-Sep\", null, null, null, \"1\" ]\n]\n</code></pre>"},{"location":"commands/nodes/meta/delete/","title":"Nodes Meta Delete","text":"<p>Delete all metadata associated with a node.</p>"},{"location":"commands/nodes/meta/delete/#usage","title":"Usage","text":"<pre><code>s10k nodes meta delete -node=&lt;nodeId&gt;\n</code></pre>"},{"location":"commands/nodes/meta/delete/#options","title":"Options","text":"Option Long Version Description <code>-node=</code> <code>--node-id=</code> the node ID to delete metadata from"},{"location":"commands/nodes/meta/delete/#output","title":"Output","text":"<p>A success message.</p>"},{"location":"commands/nodes/meta/delete/#examples","title":"Examples","text":"Delete metadata<pre><code>s10k --profile demo nodes meta delete --node-id 101\n</code></pre>"},{"location":"commands/nodes/meta/list/","title":"Nodes Meta List","text":"<p>Show metadata matching a search filter.</p>"},{"location":"commands/nodes/meta/list/#usage","title":"Usage","text":"<pre><code>s10k nodes meta list [-filter=&lt;filter&gt;] -node=nodeId[,nodeId...]\n                     [-node=nodeId[,nodeId...]]...\n</code></pre>"},{"location":"commands/nodes/meta/list/#options","title":"Options","text":"Option Long Version Description <code>-node=</code> <code>--node-id=</code> the node ID(s) to show metadata for <code>-filter=</code> <code>--filter=</code> an optional metadata filter to limit results to"},{"location":"commands/nodes/meta/list/#output","title":"Output","text":"<p>A listing of all matching node metadata records.</p>"},{"location":"commands/nodes/meta/list/#examples","title":"Examples","text":"<p>You can show exactly the metadata for a single node like this:</p> Show metadata for one nodeOutput <pre><code>s10k --profile demo nodes meta list --node-id 101\n</code></pre> <pre><code>Property Value\n------------------------------------\nnodeId   101\ncreated  2025-08-28T23:22:00.237150Z\nupdated  2025-08-29T05:20:06.322691Z\n{\n    \"m\" : {\n        \"limit\" : 123,\n    }\n}\n</code></pre> <p>You can show multiple node metadatas by providing multiple <code>--node-id</code> options or as a comma-delimited list:</p> Show metadata for multiple nodesOutput <pre><code># using multiple options\ns10k --profile demo nodes meta list --node-id 101 --node-id 102\n\n# or the same thing, using a comma-delimited list\ns10k --profile demo nodes meta list --node-id 101,102\n</code></pre> <pre><code>Property Value\n------------------------------------\nnodeId   101\ncreated  2025-08-28T23:22:00.237150Z\nupdated  2025-08-29T05:20:06.322691Z\n{\n    \"m\" : {\n        \"limit\" : 123\n    }\n}\n\nProperty Value\n------------------------------------\nnodeId   102\ncreated  2025-08-28T12:22:00.433152Z\nupdated  2025-08-28T18:11:21.627128Z\n{\n    \"m\" : {\n        \"limit\" : 234\n    }\n}\n</code></pre> <p>You can restrict the returned metadata using a metadata filter, for example to show only the metadata where <code>limit</code> is greater than <code>200</code>:</p> Show metadata for one nodeOutput <pre><code>s10k --profile demo nodes meta list --node-id 101,102 --filter '(m/limit&gt;200)'\n</code></pre> <pre><code>Property Value\n------------------------------------\nnodeId   102\ncreated  2025-08-28T12:22:00.433152Z\nupdated  2025-08-28T18:11:21.627128Z\n{\n    \"m\" : {\n        \"limit\" : 234\n    }\n}\n</code></pre>"},{"location":"commands/nodes/meta/save/","title":"Nodes Meta Save","text":"<p>Save metadata associated with a node.</p>"},{"location":"commands/nodes/meta/save/#usage","title":"Usage","text":"<pre><code>s10k nodes meta save [-r] -node=&lt;nodeId&gt; [&lt;metadata&gt;]\n</code></pre>"},{"location":"commands/nodes/meta/save/#options","title":"Options","text":"Option Long Version Description <code>-node=</code> <code>--node-id=</code> the node ID to save metadata to <code>-r</code> <code>--replace</code> replace all existing metadata, rather than add/update"},{"location":"commands/nodes/meta/save/#output","title":"Output","text":"<p>A success message, followed by a pretty-printed copy of the saved metadata.</p>"},{"location":"commands/nodes/meta/save/#metadata-structure","title":"Metadata structure","text":"<p>SolarNetwork defines metadata as two tree-like structures along with a set of tags. First there is the <code>m</code> structure that defines a simple key-value pair of simple values (like strings, booleans, and numbers). Then there is the <code>pm</code> structure that defines an arbitrarily-nested tree structure. Then there is the <code>t</code> set of tags. An example looks like this:</p> <pre><code>{\n  \"m\" : {\n    \"limit\" : 10000,\n    \"group\" : \"alpha\"\n  },\n  \"pm\" : {\n    \"os\" : {\n      \"arch\" : \"aarch64\",\n      \"name\" : \"Linux\",\n      \"version\" : \"6.1.21-v8+\"\n    }\n  },\n  \"t\" : [\"west\", \"red\"]\n}\n</code></pre>"},{"location":"commands/nodes/meta/save/#examples","title":"Examples","text":"<p>The metadata to save can be provided directly as a command argument, for example:</p> Metadata as command argument<pre><code>s10k --profile demo nodes meta save --node-id 101 '{\"m\":{\"limit\":123}}'\n</code></pre> <p>A file with the metadata can be referenced using <code>@@</code> followed by the file path:</p> Metadata as a file<pre><code>s10k --profile demo nodes meta save --node-id 101 @@/path/to/metadata.json\n</code></pre> <p>The metadata content can be read from standard input, like this:</p> Metadata read from standard input<pre><code>s10k --profile demo nodes meta save --node-id 101 &lt;/path/to/metadata.json\n</code></pre> <p>Similarly, the metadata content can be piped to the command, like this:</p> ExampleOutput Metadata piped from standard input<pre><code>jq -n --argjson  limit 123 '{\"m\":{\"limit\":$limit}}' \\\n  |s10k --profile demo nodes meta save --node-id 101\n</code></pre> <pre><code>Node metadata added:\n{\n    \"m\" : {\n        \"limit\" : 123\n    }\n}\n</code></pre>"}]}