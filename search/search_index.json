{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SolarNetwork CLI","text":"<p>This handbook provides guides and reference documentation for the SolarNetwork command line interface (CLI) tool, <code>s10k</code>. This is a command oriented tool where each command supports its own set of options, along with some global options.</p> <p>Here is an example of running <code>s10k</code> to display the metadata associated with a SolarNode, using the <code>nodes meta list</code> command:</p> <pre><code>s10k --profile demo nodes meta list --node-id 101\n\nProperty Value\n------------------------------------\nnodeId   101\ncreated  2025-08-28T23:22:00.237150Z\nupdated  2025-08-28T23:22:00.237150Z\n{\n  \"pm\" : {\n    \"os\" : {\n      \"arch\" : \"aarch64\",\n      \"name\" : \"Linux\",\n      \"version\" : \"6.1.21-v8+\"\n    }\n  }\n}\n</code></pre>"},{"location":"global-options/","title":"Global options","text":"<p>Some \"global\" options are available irrespective of the command you are running. They must be provided before the command and any subsequent command-specific options. The following global options are supported:</p> Option Long Version Description <code>-h</code> <code>--help</code> Display help information <code>-P</code> <code>--profile</code> Select a profile to use <code>--http-trace</code> Enable HTTP exchange trace logging. Must also configure the <code>net.solarnetwork.http.REQ</code> and/or <code>net.solarnetwork.http.RES</code> logger levels to <code>TRACE</code>."},{"location":"install/","title":"Install","text":"<p>TODO</p>"},{"location":"logging/","title":"Logging","text":"<p>Debug logging can be enabled by creating an <code>application.yml</code> file in your working directory. You can then configure standard Spring Boot Logging settings. For example if you would like HTTP exchange traces, use the <code>--http-trace</code> global option and then configure <code>application.yml</code> something like this:</p> <pre><code>logging:\n  file.name: \"/var/tmp/s10k.log\"\n  level:\n    net.solarnetwork.http: \"TRACE\"\n  threshold:\n    console: \"OFF\"\n    file: \"TRACE\"\n</code></pre>"},{"location":"profiles/","title":"Profiles","text":"<p>To help make it easier to provide the necessary SolarNetwork credentials to the tool, you can create named credential  profiles that you can specify with the <code>--profile/-P</code> options, for example:</p> <pre><code>s10k --profile=home ...\n</code></pre> <p>The profiles are stored in a <code>$HOME/.s10k/credentials</code> file, where <code>$HOME</code> is your system user's \"home\" directory. For example on macOS for a user <code>alice</code> this might look like <code>/Users/alice/.s10k/credentials</code> or on Linux <code>/home/alice/.s10k/credentials</code>.</p> <p>Warning</p> <p>As you will be configuring your SolarNetwork credentials in this file, you should take care to configure limited permissions to the file.</p> <p>Here is how you could set up the <code>credentials</code> file the first time, ensuring limited permissions to the file:</p> macOS/LinuxWindows <pre><code>mkdir ~/.s10k\nchmod 700 ~/.s10k\ntouch ~/.s10k/credentials\nchmod 600 ~/.s10k/credentials\n</code></pre> <p>TODO</p>"},{"location":"profiles/#credential-profile-structure","title":"Credential profile structure","text":"<p>The credentials profile file is a TOML file, where each profile starts with a <code>[NAME]</code> line, where <code>NAME</code> is the name of the profile. Following that are <code>key = \"value\"</code> configuration lines. For example, here is a <code>credentials</code> file with two profiles named home and work:</p> <pre><code>[home]\nsn_token_id = \"HOME_TOKEN_ID\"\nsn_token_secret = \"HOME_TOKEN_SECRET\"\n\n[work]\nsn_token_id = \"WORK_TOKEN_ID\"\nsn_token_secret = \"WORK_TOKEN_SECRET\"\n</code></pre>"},{"location":"profiles/#profile-properties","title":"Profile properties","text":"<p>The following properties are supported in each profile:</p> Profile Property Description <code>sn_token_id</code> The SolarNetwork token identifier <code>sn_token_secret</code> The SolarNetwork token secret"},{"location":"commands/","title":"Commands","text":"<p>The <code>s10k</code> tool works as a set of commands and sub-commands, in a sort of command hierachy.</p>"},{"location":"commands/nodes/","title":"Nodes Commands","text":"<p>TODO</p>"},{"location":"commands/nodes/meta/","title":"Nodes Meta Commands","text":"<p>The <code>nodes meta</code> commands deal with SolarNode metadata, which is metadata associated with a specific node. Node metadata is both published and consumed by nodes. For example nodes publish metadata about themselves (like hardware architecture and version); node metadata can be easily used in node expressions, which makes it a good candidate for node-level parameters that do not change too frequently.</p>"},{"location":"commands/nodes/meta/delete/","title":"Nodes Meta Delete","text":"<p>Delete all metadata associated with a node.</p>"},{"location":"commands/nodes/meta/delete/#usage","title":"Usage","text":"<pre><code>s10k nodes meta delete -node=&lt;nodeId&gt;\n</code></pre>"},{"location":"commands/nodes/meta/delete/#options","title":"Options","text":"Option Long Version Description <code>-node=</code> <code>--node-id=</code> the node ID to delete metadata from"},{"location":"commands/nodes/meta/delete/#output","title":"Output","text":"<p>A success message.</p>"},{"location":"commands/nodes/meta/delete/#examples","title":"Examples","text":"Delete metadata<pre><code>s10k --profile demo nodes meta delete --node-id 101\n</code></pre>"},{"location":"commands/nodes/meta/list/","title":"Nodes Meta List","text":"<p>Show metadata matching a search filter.</p>"},{"location":"commands/nodes/meta/list/#usage","title":"Usage","text":"<pre><code>s10k nodes meta list [-filter=&lt;filter&gt;] -node=nodeId[,nodeId...]\n                     [-node=nodeId[,nodeId...]]...\n</code></pre>"},{"location":"commands/nodes/meta/list/#options","title":"Options","text":"Option Long Version Description <code>-node=</code> <code>--node-id=</code> the node ID(s) to show metadata for <code>-filter=</code> <code>--filter=</code> an optional metadata filter to limit results to"},{"location":"commands/nodes/meta/list/#output","title":"Output","text":"<p>A listing of all matching node metadata records.</p>"},{"location":"commands/nodes/meta/list/#examples","title":"Examples","text":"<p>You can show exactly the metadata for a single node like this:</p> Show metadata for one nodeOutput <pre><code>s10k --profile demo nodes meta list --node-id 101\n</code></pre> <pre><code>Property Value\n------------------------------------\nnodeId   101\ncreated  2025-08-28T23:22:00.237150Z\nupdated  2025-08-29T05:20:06.322691Z\n{\n    \"m\" : {\n        \"limit\" : 123,\n    }\n}\n</code></pre> <p>You can show multiple node metadatas by providing multiple <code>--node-id</code> options or as a comma-delimited list:</p> Show metadata for multiple nodesOutput <pre><code># using multiple options\ns10k --profile demo nodes meta list --node-id 101 --node-id 102\n\n# or the same thing, using a comma-delimited list\ns10k --profile demo nodes meta list --node-id 101,102\n</code></pre> <pre><code>Property Value\n------------------------------------\nnodeId   101\ncreated  2025-08-28T23:22:00.237150Z\nupdated  2025-08-29T05:20:06.322691Z\n{\n    \"m\" : {\n        \"limit\" : 123\n    }\n}\n\nProperty Value\n------------------------------------\nnodeId   102\ncreated  2025-08-28T12:22:00.433152Z\nupdated  2025-08-28T18:11:21.627128Z\n{\n    \"m\" : {\n        \"limit\" : 234\n    }\n}\n</code></pre> <p>You can restrict the returned metadata using a metadata filter, for example to show only the metadata where <code>limit</code> is greater than <code>200</code>:</p> Show metadata for one nodeOutput <pre><code>s10k --profile demo nodes meta list --node-id 101,102 --filter '(m/limit&gt;200)'\n</code></pre> <pre><code>Property Value\n------------------------------------\nnodeId   102\ncreated  2025-08-28T12:22:00.433152Z\nupdated  2025-08-28T18:11:21.627128Z\n{\n    \"m\" : {\n        \"limit\" : 234\n    }\n}\n</code></pre>"},{"location":"commands/nodes/meta/save/","title":"Nodes Meta Save","text":"<p>Save metadata associated with a node.</p>"},{"location":"commands/nodes/meta/save/#usage","title":"Usage","text":"<pre><code>s10k nodes meta save [-r] -node=&lt;nodeId&gt; [&lt;metadata&gt;]\n</code></pre>"},{"location":"commands/nodes/meta/save/#options","title":"Options","text":"Option Long Version Description <code>-node=</code> <code>--node-id=</code> the node ID to save metadata to <code>-r</code> <code>--replace</code> replace all existing metadata, rather than add/update"},{"location":"commands/nodes/meta/save/#output","title":"Output","text":"<p>A success message, followed by a pretty-printed copy of the saved metadata.</p>"},{"location":"commands/nodes/meta/save/#metadata-structure","title":"Metadata structure","text":"<p>SolarNetwork defines metadata as two tree-like structures along with a set of tags. First there is the <code>m</code> structure that defines a simple key-value pair of simple values (like strings, booleans, and numbers). Then there is the <code>pm</code> structure that defines an arbitrarily-nested tree structure. Then there is the <code>t</code> set of tags. An example looks like this:</p> <pre><code>{\n  \"m\" : {\n    \"limit\" : 10000,\n    \"group\" : \"alpha\"\n  },\n  \"pm\" : {\n    \"os\" : {\n      \"arch\" : \"aarch64\",\n      \"name\" : \"Linux\",\n      \"version\" : \"6.1.21-v8+\"\n    }\n  },\n  \"t\" : [\"west\", \"red\"]\n}\n</code></pre>"},{"location":"commands/nodes/meta/save/#examples","title":"Examples","text":"<p>The metadata to save can be provided directly as a command argument, for example:</p> Metadata as command argument<pre><code>s10k --profile demo nodes meta save --node-id 101 '{\"m\":{\"limit\":123}}'\n</code></pre> <p>A file with the metadata can be referenced using <code>@@</code> followed by the file path:</p> Metadata as a file<pre><code>s10k --profile demo nodes meta save --node-id 101 @@/path/to/metadata.json\n</code></pre> <p>The metadata content can be read from standard input, like this:</p> Metadata read from standard input<pre><code>s10k --profile=demo nodes meta save -node 1011 &lt;/path/to/metadata.json\n</code></pre> <p>Similarly, the metadata content can be piped to the command, like this:</p> ExampleOutput Metadata piped from standard input<pre><code>jq -n --argjson  limit 123 '{\"m\":{\"limit\":$limit}}' \\\n  |s10k --profile demo nodes meta save --node-id 101\n</code></pre> <pre><code>Node metadata added:\n{\n    \"m\" : {\n        \"limit\" : 123\n    }\n}\n</code></pre>"}]}